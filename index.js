import 'dotenv/config';
import {Bot, InlineKeyboard, webhookCallback} from 'grammy';
import {hydrate} from '@grammyjs/hydrate';
import {keyboardGenerator} from './helper/keyboardGenerator.js'
import {db} from './firebase.js';
import * as functions from "firebase-functions";
import {addDoc, arrayUnion, collection, doc, getDoc, getDocs, query, setDoc, updateDoc, where} from "firebase/firestore"
import getNextTrainingsDates from "./helper/getNextTrainingsDates.js";
import {SCHEDULE} from "./constants.js";
import {forAdmins} from "./helper/forAdmins.js";
import getEndOfNextWeek from "./helper/getEndOfNextWeek.js";
import formatFirebaseDate from "./helper/formatFirebaseDate.js";
import {endOfWeek, startOfWeek} from 'date-fns'
import getStartOfNextWeek from "./helper/getStartOfNextWeek.js";
import generateDayScheduleText from "./helper/generateDayScheduleText.js";

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

const additionalButtonsInSchedule = [
    { value: "all_records", label: "üìÜ –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ—ó –∑–∞–ø–∏—Å–∏"}
]

const menuButton = [
    { value: 'back', label: 'üìç –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é'}
]

const menuButtonKeyboard = new InlineKeyboard()
    .text('üìç –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é', 'back');

const removeKeyboard = new InlineKeyboard()
    .text('üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å', 'remove').row()
    .text('üìç –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é', 'back');

let userName;

bot.command('start').filter(forAdmins, async (ctx) => {
    userName = ctx.msg.chat?.first_name;
    await ctx.reply(`–ü—Ä–∏–≤—ñ—Ç, ${userName}!`)
});

bot.command('start', async (ctx) => {
    const userId = ctx.msg.from.id.toString()
    const userRef = doc(db, 'users', userId)
    userName = ctx.msg.chat?.first_name
    await setDoc(userRef, {id: ctx.msg.from.id, name: ctx.msg.chat?.first_name})

    await ctx.reply(`–ü—Ä–∏–≤—ñ—Ç, <b>${ctx.msg.chat?.first_name}</b>!\n\n–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —ñ–º º—è –∞–±–æ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –ø–∞–Ω–µ–ª—å –º–µ–Ω—é, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –±—É—Ä–≥–µ—Ä —É –Ω–∏–∂–Ω—å–æ–º—É –ª—ñ–≤–æ–º—É –∫—É—Ç–∫—É.\n\n–î–ª—è –∑–∞–ø–∏—Å—É –Ω–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å-—è–∫–µ <i>–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</i>.`, {
        parse_mode: 'HTML'
    })
});

bot.command('start_record').filter(forAdmins, async (ctx) => {
    const nextDates = getNextTrainingsDates(SCHEDULE);
    const trainingsRef = collection(db, 'trainings');
    nextDates.forEach(async (day, index) => {
        const querySnap = await getDocs(query(trainingsRef, where("date", "==", day)))
        if(querySnap.empty) {
            addDoc(trainingsRef, {date: day, participants: [], label: SCHEDULE[index].label})
        } else {
            console.log(day, 'already here')
        }
    })

    await ctx.reply(nextDates.toString());
})

bot.command('get_current_schedule', async (ctx) => {
    const now = new Date()
    const startOfThisWeek = startOfWeek(now, { weekStartsOn: 1 });
    const endOfThisWeek = endOfWeek(now, { weekStartsOn: 1 });
    const trainingsRef = collection(db, 'trainings');
    const querySnap = await getDocs(query(trainingsRef, where("date", ">=", startOfThisWeek), where("date", "<=", endOfThisWeek)))

    let msg = ''
    querySnap.forEach(training => {
        msg += generateDayScheduleText(training.data())
    })

    if(!msg) {
        msg = '–ù–µ–º–∞—î —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å'
    }

    await ctx.reply(msg, {
        parse_mode: 'HTML'
    })
});

bot.command('get_next_schedule', async (ctx) => {
    const startOfNextWeek = getStartOfNextWeek();
    const endOfNextWeek = getEndOfNextWeek();
    const trainingsRef = collection(db, 'trainings');

    const querySnap = await getDocs(query(trainingsRef, where("date", ">=", startOfNextWeek), where("date", "<=", endOfNextWeek)))

    let msg = ''
    querySnap.forEach(training => {
        msg += generateDayScheduleText(training.data())
    })

    if(!msg) {
        msg = '–ù–µ–º–∞—î —Ä–æ–∑–∫–ª–∞–¥—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å'
    }

    await ctx.reply(msg, {
        parse_mode: 'HTML'
    })
});

async function getTrainingOptionsTillEndOfNextWeek(){
    const trainingsRef = collection(db, 'trainings');
    const now = new Date()
    const querySnap = await getDocs(query(trainingsRef, where("date", ">=", now), where("date", "<=", getEndOfNextWeek())))
    const options = []
    querySnap.forEach(day => {
        const data = day.data()
        options.push({
            value: `$${day.id}`,
            label: `${formatFirebaseDate(data.date)} ${data.label}`
        })
    })

    return options
}

bot.on('message', async (ctx) => {
    const options = await getTrainingOptionsTillEndOfNextWeek()

    await ctx.reply('–î–ª—è –∑–∞–ø–∏—Å—É <i>–æ–±–µ—Ä—ñ—Ç—å</i> —Ç–∞ <u>–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å</u> –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –¥–µ–Ω—å —ñ–∑ —Å–ø–∏—Å–∫—É: ', {
        parse_mode: 'HTML',
        reply_markup: keyboardGenerator([...options, ...additionalButtonsInSchedule])
    });
});

// For buttons with trainings
bot.on("callback_query:data").filter(ctx => ctx.callbackQuery.data.startsWith('$'), async (ctx) => {
    await ctx.answerCallbackQuery();
    const trainingId = ctx.callbackQuery.data.slice(1);
    const userId = ctx.msg.chat.id.toString();
    const trainingRef = doc(db, 'trainings', trainingId);
    const userRef = doc(db, 'users', userId);
    const user = (await getDoc(userRef)).data();
    const userTrainingRef = collection(db, 'users', userId, 'trainings');

    const training = (await getDoc(trainingRef)).data();

    if (training.participants.some(({id}) =>id === userId)) {
        await ctx.editMessageText(`<b>–í–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ñ!</b>\n\n–í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ <u>${training.label}</u>.`, {
            parse_mode: 'HTML',
            reply_markup: menuButtonKeyboard,
        });
    } else {
        updateDoc(trainingRef, {participants: arrayUnion({status: 'signed', id: userId, name: user.name})})
        addDoc(userTrainingRef, {date: training.date, label: training.label, status: "signed"});
        console.log("training", training)
        await ctx.editMessageText(`<b>–î—è–∫—É—é –∑–∞ –∑–∞–ø–∏—Å!</b>\n\n–í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ <u>${training.label}</u>.`, {
            parse_mode: 'HTML',
            reply_markup: menuButtonKeyboard,
        });
    }
});                 

bot.callbackQuery('back', async (ctx) => {
    const options = await getTrainingOptionsTillEndOfNextWeek()

    await ctx.callbackQuery.message.editText(`–î–ª—è –∑–∞–ø–∏—Å—É <i>–æ–±–µ—Ä—ñ—Ç—å</i> —Ç–∞ <u>–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å</u> –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –¥–µ–Ω—å —ñ–∑ —Å–ø–∏—Å–∫—É:`, {
        parse_mode: 'HTML',
        reply_markup: keyboardGenerator([...options, ...additionalButtonsInSchedule]),
    });
    await ctx.answerCallbackQuery();
});

bot.callbackQuery('all_records', async (ctx) => {
    const userId = ctx.msg.chat.id.toString();
    const userTrainingRef = collection(db, 'users', userId, 'trainings');
    const now = new Date()
    const querySnap = await getDocs(query(userTrainingRef, where("date", ">=", now)))
    const days = []
    querySnap.forEach(day => days.push({label: day.data().label}));

    const scheduleOptionsText = days.length
        ? '<i>–í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞:</i> '
        : '–ù–∞—Ä–∞–∑—ñ –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòï';
    await ctx.callbackQuery.message.editText(`${scheduleOptionsText}`, {
        parse_mode: 'HTML',
        reply_markup: days.length ? keyboardGenerator([...days, ...menuButton]) : menuButtonKeyboard 
    });
})

bot.api.setMyCommands([
    {
        command: 'start',
        description: '–†–æ–∑–ø–æ—á–∞—Ç–∏',
    },
    {
        command: 'start_record',
        description: '–ù–∞–¥–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Ç—å –∑–∞–ø–∏—Å—É –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å',
    },
    {
        command: 'get_current_schedule',
        description: '–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å',
    },
    {
        command: 'get_next_schedule',
        description: '–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å',
    },
    // {
    //     command: 'change_name',
    //     description: '–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º º—è', 
    // }
]);

//Error handlers
bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
      console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
      console.error("Could not contact Telegram:", e);
    } else {
      console.error("Unknown error:", e);
    }
  });

export const startBot = functions.https.onRequest(webhookCallback(bot));



// bot.callbackQuery(['monday_remove', 'tuesday_remove', 'wednesday_remove', 'thursday_remove', 'friday_remove'], async (ctx) => {
//     console.log(ctx.callbackQuery.data);
//     await ctx.callbackQuery.message.editText(`
//     –ê–±–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å –Ω–∞ <b>${ctx.callbackQuery.data}</b>, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É.\n\n
// –í–ê–ñ–õ–ò–í–û: <i>–Ø–∫—â–æ –í–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å –º–µ–Ω—à –Ω—ñ–∂ –∑–∞ <u>24 –≥–æ–¥–∏–Ω–∏</u>, –≤–∞—à —Å—Ç–∞—Ç—É—Å –±—É–¥–µ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ <b>"–í –ø—Ä–æ—Ü–µ—Å—ñ"</b>.
// –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–æ—à—É–∫—É –ª—é–¥–∏–Ω–∏ –Ω–∞ –º—ñ—Å—Ü–µ, –í–∞–º –ø—Ä–∏–π–¥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω–æ –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É - <b>"–í–∏–¥–∞–ª–µ–Ω–æ"</b>.</i>\n
// <b>–£ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –í–∏ –º–∞—î—Ç–µ —Å–ø–ª–∞—Ç–∏—Ç–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü—ñ—é —É —Ä–æ–∑–º—ñ—Ä—ñ –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è <u>250–≥—Ä–Ω</u>.</b>
//     `, {
//         parse_mode: 'HTML',
//         reply_markup: removeKeyboard,
//     });
//     await ctx.answerCallbackQuery();
// });

// bot.callbackQuery('remove', async (ctx) => {
//     await ctx.callbackQuery.message.editText(`
// –°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É - <code>"–í –ø—Ä–æ—Ü–µ—Å—ñ"</code>.
//     `, {
//         parse_mode: 'HTML',
//         reply_markup: menuKeyboard,
//     });
//     await ctx.answerCallbackQuery();
// });


// Change name logic

// bot.command('change_name', async (ctx) => {
//     const userId = ctx.msg.from.id.toString();
//     const userRef = doc(db, 'users', userId);
//     console.log(userRef);
// updateDoc(userRef, {name: ctx.msg.chat?.first_name})
//     await ctx.reply(`${ctx.msg.chat?.first_name}`, {
//         parse_mode: 'HTML'
//     })
// });